#!/bin/bash
HOMEDIR=`pwd`
SYSISO=/home/cmp/Downloads/ubuntu-18.04.2-desktop-amd64.iso
IMGFILE=ubuntu.qcow2
sudo echo
sudo apt-get install -y meson ninja-build libegl1-mesa-dev libgles2-mesa-dev libghc-x11-dev openssh-server libglib2.0-dev libpixman-1-dev libpixman-1-0 libsdl-console libsdl-console-dev libsdl2-dev sharutils flex bison git autoconf automake libtool xutils-dev libegl-mesa0 libegl1-mesa libegl1-mesa-dev libgbm-dev libgbm1 libgl1-mesa-dev libgles2-mesa libgles2-mesa-dev libglu1-mesa libglu1-mesa-dev libglx-mesa0 libwxgtk3.0-dev mesa-common-dev mesa-opencl-icd mesa-utils mesa-utils-extra mesa-va-drivers mesa-vdpau-drivers mesa-vulkan-drivers libepoxy-dev libepoxy0 libpciaccess-dev libpciaccess0 libvirglrenderer-dev libvirglrenderer0

function build_qemu {
	if [ -d qemu ]; then
		echo "[W]: Skip to download QEMU component.........."
	else
		echo "[I]: Start to download QEMU component.........."
		git clone git://git.qemu.org/qemu.git
		echo "[I]: Download QEMU SUCC.........."
	fi

	echo "[I]: Start to build qemu component.........."
	cd qemu
    #./configure \
	#	--prefix=${ALT_LOCAL} \
    #    --enable-sdl \
    #    --target-list=x86_64-softmmu \
    #    --enable-debug \
    #    --disable-werror \
    #    --disable-pie \
    #    --enable-kvm \
	#	--enable-virglrenderer
	make
	#make install
	cd ${HOMEDIR}
	echo "[I]: build qemu SUCC.........."
}


function setup_vm {
	if [ -f ${SYSISO} ]; then
		echo "[I]: Start to set up a VM.........."

		if [ -f ${IMGFILE} ];then
			echo "[W]: Skip to create img file for VM.........."
		else
			echo "[I]: Create img file for VM.........."
            ./qemu/qemu-img create -f qcow2 ${IMGFILE} 35G
		fi
        sudo ./qemu/x86_64-softmmu/qemu-system-x86_64 \
			-enable-kvm -M q35 -smp 2 -m 4G \
			-hda ubuntu.qcow2 \
			-net nic,model=virtio \
			-net user,hostfwd=tcp::2222-:22 \
			-vga virtio \
			-display sdl,gl=on \
			-boot d -cdrom ${SYSISO}
		echo "[I]: set up VM SUCC.........."
	else
		echo "[E]: Can not find sys iso. ${SYSISO}"
	fi
}

function start_vm {
	#-drive format=raw,file=ubuntu-19.04.raw,if=virtio \
	cd ${HOMEDIR}
    echo `pwd`
    ls ./qemu/x86_64-softmmu/qemu-system-x86_64
	if [ -f ${IMGFILE} ];then
		echo "[I]: Start QEMU.........."
		 sudo ./qemu/x86_64-softmmu/qemu-system-x86_64 \
             -enable-kvm  \
			 -smp 5 -M q35 -m 8G \
			 -drive format=qcow2,file=${IMGFILE},if=virtio \
			 -net nic,model=virtio \
			 -net user,hostfwd=tcp::2222-:22 \
			 -soundhw hda \
			 -audiodev id=pa,driver=pa,server= \
			 -vga virtio \
			 -display sdl,gl=on
			 #-display sdl,gl=on \
			 #-fsdev local,id=test_dev,path=$HOME/.local/share/Steam/,security_model=none \
			 #-device virtio-9p-pci,fsdev=test_dev,mount_tag=test_mount
	else
		echo "[E]: Can not find img file. ${IMGFILE}"
	fi
}
##### Build QEMU
sleep 1
build_qemu

if [ -f ${IMGFILE} ];then
    # QEMU works with virglrenderer 
    start_vm
else
    ### Set up a VM
    setup_vm
fi





















#### Build libepoxy
#sleep 1
#build_libepoxy


#### Build libpciaccess
#sleep 1
#build_libpciaccess

#### Build Mesa
#sleep 1
#build_mesa

#### Build virglrenderer
#sleep 1
#build_virglrenderer

#USERNAME=`whoami`
#
##### environment configuration
#function prefix_setup {
#  local PREFIX="$1"
#  if [ -d $1 ]; then
#      export PATH=${PATH}:${PREFIX}/bin
#      export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PREFIX}/lib
#      export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${PREFIX}/lib/pkgconfig/:${PREFIX}/share/pkgconfig/
#      export MANPATH=${MANPATH}:${PREFIX}/share/man
#      export ACLOCAL_PATH=${PREFIX}/share/aclocal
#      sudo mkdir -p "${ACLOCAL_PATH}"
#      sudo chown -R ${USERNAME}:${USERNAME} ${ACLOCAL_PATH}
#      export ACLOCAL="aclocal -I $ACLOCAL_PATH"
#      return 0
#  else
#      echo "[E]: Can not find this directory. $1"
#      return 1
#  fi
#}
#
## exploit CVE-2019-18389 env config
#function projectshell {
#    if [ "$1" = "virgl" ] || [ "$1" = "virglrenderer" ];then
#        export ALT_LOCAL=/opt/local/virgl
#        sudo mkdir -p ${ALT_LOCAL}
#        sudo chown -R ${USERNAME}:${USERNAME} ${ALT_LOCAL}
#        prefix_setup ${ALT_LOCAL}
#    fi
#}
##projectshell virgl
##echo "ALT_LOCAL=${ALT_LOCAL}"
#
#function build_libepoxy {
#	if [ -d libepoxy ]; then
#		echo "[W]: Skip to download libepoxy component.........."
#	else
#		echo "[I]: Start to download libepoxy component.........."
#		git clone https://github.com/anholt/libepoxy.git
#        git reset --hard 8d03a6a8278f7e12a910b5a8288484f8ae431653
#		echo "[I]: download libepoxy SUCC.........."
#	fi
#
#    echo "[I]: Start to build libepoxy component.........."
#    cd libepoxy
#    ./autogen.sh --prefix=${ALT_LOCAL}
#    make
#    make install
#    cd ${HOMEDIR}
#    echo "[I]: build libepoxy SUCC.........."
#}
#
#function build_virglrenderer {
#	if [ -d virglrenderer ]; then
#		echo "[W]: Skip to download virglrenderer component.........."
#	else
#		echo "[I]: Start to download virglrenderer component.........."
#		git clone git://anongit.freedesktop.org/virglrenderer
#        git reset --hard 76b3da97b5fd98b1669147db585bed7ccfaf11a7
#		echo "[I]: Download virglrenderer SUCC.........."
#	fi
#    export GBM_CFLAGS=/opt/local/virgl/bin/lightgbm
#    export GBM_LIBS=/opt/local/virgl/lib/lib_lightgbm.so
#
#    echo "[I]: Start to build virglrenderer component.........."
#    cd virglrenderer
#    ./autogen.sh --prefix=${ALT_LOCAL}
#    make
#    make install
#    cd ${HOMEDIR}
#    echo "[I]: build virglrenderer SUCC.........."
#}
#
#function build_libpciaccess {
#	if [ -d libpciaccess ]; then
#		echo "[W]: Skip to download libpciaccess component.........."
#	else
#		echo "[I]: Start to download libpciaccess component.........."
#		git clone git://git.freedesktop.org/git/xorg/lib/libpciaccess
#        git reset --hard 13854f603f720c45caf51d785a874d3c7e8c5f58
#		echo "[I]: Download libpciaccess SUCC.........."
#	fi
#
#    echo "[I]: Start to build libpciaccess component.........."
#    cd libpciaccess
#    ./autogen.sh --prefix=${ALT_LOCAL}
#    make -j2
#    #make install
#    cd ${HOMEDIR}
#    echo "[I]: build libpciaccess SUCC.........."
#}
#
#function build_mesa {
#	# Fetch dependencies
#	#sudo sed -i 's/\#deb-src/deb-src/' /etc/apt/sources.list
#	#sudo apt update
#	#sudo apt-get build-dep mesa
#
#	# Actually build Mesa
#	if [ -d mesa ]; then
#		echo "[W]: Skip to download Mesa component.........."
#	else
#		echo "[I]: Start to download Mesa component.........."
#		git clone https://anongit.freedesktop.org/git/mesa/mesa.git
#        git reset --hard acfd88204e886e671da97b895fd2d1ee39b61256
#		echo "[I]: Download Mesa SUCC.........."
#	fi
#
#    echo "[I]: Start to build mesa component.........."
#    cd mesa
#    ./autogen.sh --prefix=${ALT_LOCAL} --enable-llvm --with-plaforms
#    make -j2
#    #make install
#    cd ${HOMEDIR}
#    echo "[I]: build mesa SUCC.........."
#}
#
